#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May 10 19:50:59 2022

@author: Ya-Chen Chuang
"""
# to interacte  with plot
# %matplotlib widget
# import ipywidgets as widgets

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import load_boston
from sklearn.linear_model import LinearRegression
import pandas as pd
from mpl_toolkits.mplot3d import Axes3D
import statsmodels.api as sm

df = pd.read_excel("/Users/kurtlab/Desktop/Chiari_Morphometric/results/morphology_results/morphometric_stat_combine.xlsx", sheet_name='2D3D_combine');

## extra each variable
# tonsil = pd.DataFrame(df["TonsilV"].values, index = None, columns = ["TonsilV"]); 
# CBLv = pd.DataFrame(df["CBLv"].values, index = None, columns = ["CBLv"]); 
# BSv = pd.DataFrame(df["BSv"].values, index = None, columns = ["BSv"]); 
Ventricle = pd.DataFrame(df["4thV"].values, index = None, columns = ["4thV"]); 
tonsilL = pd.DataFrame(df["TonsilL"].values, index = None, columns = ["TonsilL"]);
FMa = pd.DataFrame(df["FMaRatio"].values, index = None, columns = ["FMaRatio"]);
# Clivo_occipital = pd.DataFrame(df["Clivo_occipital"].values, index = None, columns = ["Clivo_ccipital"]);
# Boogard_Angle = pd.DataFrame(df["Boogard"].values, index = None, columns = ["Boogard"]);
# Occipital_angle = pd.DataFrame(df["Occipital"].values, index = None, columns = ["Occipital"]);
# Clivus_canal = pd.DataFrame(df["Clivus_canal"].values, index = None, columns = ["Clivus_canal"]);

## categorize Syringomyelia
Chiari = df.loc[df["condition"]=="Chiari", "condition"]=0
Healthy = df.loc[df["condition"]=="Healthy", "condition"]=1
label = df["condition"]


## Model generation and fitting
# Chiari
ChiariData = pd.DataFrame()
ChiariData['tonsilL'] = pd.DataFrame(df[df["condition"]==0]['TonsilL'])
ChiariData['FMaRatio'] = pd.DataFrame(df[df["condition"]==0]['FMaRatio'])
ChiariData['Ventricle'] = pd.DataFrame(df[df["condition"]==0]['4thV'])
ChiariDataUsed = ChiariData.dropna()

X_multi = ChiariDataUsed[["tonsilL", "FMaRatio"]]
Y_target = ChiariDataUsed["Ventricle"]

lreg = LinearRegression()
lreg.fit(X_multi, Y_target)
a1, a2 = lreg.coef_ #coefficient
b1 = lreg.intercept_ #Intercept

# Healthy
HealthyData = pd.DataFrame()
HealthyData['tonsilL'] = pd.DataFrame(df[df["condition"]==1]['TonsilL'])
HealthyData['FMaRatio'] = pd.DataFrame(df[df["condition"]==1]['FMaRatio'])
HealthyData['Ventricle'] = pd.DataFrame(df[df["condition"]==1]['4thV'])
HealthyDataUsed = HealthyData.dropna()

X_multi_H = HealthyDataUsed[["tonsilL", "FMaRatio"]]
Y_target_H = HealthyDataUsed["Ventricle"]

lreg_H = LinearRegression()
lreg_H.fit(X_multi_H, Y_target_H)
a3, a4 = lreg_H.coef_ #coefficient
b2 = lreg_H.intercept_ #Intercept


## with statsmodels
X_multi = sm.add_constant(X_multi) # adding a constant
 
ChiariStat = sm.OLS(Y_target, X_multi).fit()
predictChiari = ChiariStat.predict(X_multi) 
 
print_Chiari = ChiariStat.summary()
print(print_Chiari)


## Plot
#3D drawing (drawing of measured values)
fig = plt.figure()
# ax = Axes3D(fig)

ax = fig.add_subplot(111, projection='3d')

scat_plot = ax.scatter(xs = tonsilL, ys = FMa, zs = Ventricle, c = label)

## 3D drawing (drawing of regression plane)
# Chiari
X1, Y1 = np.meshgrid(np.arange(0, 25, 1), np.arange(0, 1, 0.01))
Z1 = a1 * X1 + a2 * Y1 + b1
ax.plot_surface(X1, Y1, Z1, alpha = 0.5) #Specify transparency with alpha

# Healthy
X2, Y2 = np.meshgrid(np.arange(0, 25, 1), np.arange(0, 1, 0.01))
Z2 = a3 * X2 + a4 * Y2 + b2
ax.plot_surface(X2, Y2, Z2, alpha = 0.5) #Specify transparency with alpha

ax.set_title("volumetric correlation")

ax.set_xlabel("Tonsil length (mm)")

ax.set_ylabel("(CMa+Ta)/FMa (%)")

ax.set_zlabel("4th ventricle volume (mm^3)")

cb = plt.colorbar(scat_plot, pad=0.2)

cb.set_ticks([0,1])

cb.set_ticklabels(["Chiari", "Healthy"])

plt.show()